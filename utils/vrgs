#!/bin/env python

import sys
sys.dont_write_bytecode = True

#import ipdb
import argparse
from sparql_utils import rq_select, rq_insert_graph, rq_update, to_rdfw, vrgs_prefix
import pandas as pd
import rdflib
import uuid

def create_uri(rdfs_class):
    uri_s = rdfs_class + "##" + str(uuid.uuid4())
    return rdflib.URIRef(uri_s)
    
def do_insert_graph(args):
    turtle_file_path = args.ttl_file
    vrgs_path = args.vrgs_path
    #ipdb.set_trace()
    graph_uri = create_uri("vrgs:Graph")
        
    # Load the Turtle data into an RDFLib graph
    descr_g = rdflib.Graph()
    descr_g.add((graph_uri, rdflib.URIRef("vrgs:path"), rdflib.Literal(vrgs_path)))
    g = rdflib.Graph()
    g.parse(turtle_file_path, format="turtle")

    rq_insert_graph(descr_g, None)
    rq_insert_graph(g, graph_uri)

def do_remove_vrgs_graph(args):
    vrgs_path = args.vrgs_path
    query = f"""
    prefix vrgs: <vrgs:>
    delete {{ ?s ?p ?o }} where {{
     {{
      ?g vrgs:path "{vrgs_path}" .
      graph ?g {{ ?s ?p ?o }}
     }} union {{
      ?s vrgs:path "{vrgs_path}". ?s ?p ?o
     }}
    }}
    """
    print(query)
    rq_update(query)
    
def do_ls_vrgs_graphs(args):
    print("args:", args)

    query = """
    #PREFIX vrgs: <%vrgs_prefix%>
    PREFIX vrgs: <vrgs:>
    PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
    select ?vrgs_path ?graph_uri { ?graph_uri vrgs:path ?vrgs_path } 
    """.replace("%vrgs_prefix%", vrgs_prefix)
    #print(query)
    
    res = rq_select(query)
    print(pd.DataFrame.from_dict(res['results']['bindings']).map(to_rdfw).to_string(index = False))
    
def do_ls_all_graphs(args):
    print("args:", args)

    # SPARQL query to run
    query = """
    PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>    
    select ?g (count(*) as ?count) { 
     { bind(rdf:nil as ?g) ?s ?p ?o } union { graph ?g {?s ?p ?o} }
    } 
    group by ?g
    """

    res = rq_select(query)
    print(pd.DataFrame.from_dict(res['results']['bindings']).map(to_rdfw))
    
def do_config_show(args):
    print("do_config_show:", args)

def do_config_set(args):
    print("do_config_set:", args)
        
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Command processor example")
    subparsers = parser.add_subparsers(title="subcommands") #, description="valid subcommands") #, help="sub-command help")

    parser_config = subparsers.add_parser("config", help = "configure graph store explorer")
    config_subparsers = parser_config.add_subparsers()
    parser_config_show = config_subparsers.add_parser("show", help = "shows current config")
    parser_config_show.set_defaults(func = do_config_show)    
    parser_config_set = config_subparsers.add_parser("set", help = "set specified config_value")
    parser_config_set.add_argument("--key", required = True, help = "key")
    parser_config_set.add_argument("--value", required = True, help = "value")
    parser_config_set.set_defaults(func = do_config_set)
    
    parser_ls_graphs = subparsers.add_parser("ls-graphs", help = "provides list of all graphs")
    parser_ls_graphs.set_defaults(func = do_ls_all_graphs)

    parser_ls = subparsers.add_parser("ls", help = "provides list of all vrgs graphs")
    parser_ls.set_defaults(func = do_ls_vrgs_graphs)    
    
    parser_insert = subparsers.add_parser("insert", help = "inserts ttl file to specified graph")    
    parser_insert.add_argument("--vrgs-path", type=str, required = True, help = "destination vrgs graph path")
    parser_insert.add_argument("--ttl-file", type=str, required = True, help = "data file")
    parser_insert.set_defaults(func = do_insert_graph)

    parser_remove = subparsers.add_parser("remove", help = "remote vrgs graph")
    parser_remove.add_argument("--vrgs-path", type=str, required = True, help = "vrgs graph to remove")
    parser_remove.set_defaults(func = do_remove_vrgs_graph)
    
    #do_select()
    #do_insert("../examples/alice-bob/data.ttl", "http://example.com/graph/#t1")

    args = parser.parse_args()
    if 'func' in args:
        args.func(args)
    else:
        parser.print_help()
        
